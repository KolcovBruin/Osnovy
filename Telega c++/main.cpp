#include <iostream>
#include <stdio.h>
#include <td/telegram/td_json_client.h>
#include <unistd.h>
#include <stdlib.h>
#include <cstdlib>
//https://tdlib.github.io/td/build.html –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

//https://core.telegram.org/tdlib/docs/annotated.html. —Å–∞–º–∞—è –ø–æ–ª–µ–∑–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è tdlib!!!!!!
//–±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –æ—á–µ–Ω—å —Å—ã—Ä–æ, –º–æ–∂–Ω–æ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –≤–≤–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–ø, –Ω–æ —Å–∏–ª –Ω–µ—Ç, –≤—Å–µ –∂–µ–ª–∞—é—â–∏–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∂–µ–ª–∞—é —É–¥–∞—á–∏
int rezf;//—Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–ª–æ–∂–µ–Ω–∏—è
int br;//–ª–∏—à–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ª–µ–Ω—å —á–∏—Å—Ç–∏—Ç—å
int cntn2;//—Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤
int cntn1;//—Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–∏—Å–ª–∞
int cntn3=0;//—Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤ –¥–ª—è –µ—â–µ –∫–∞–∫–æ–≥–æ—Ç–æ —á–∏—Å–ª–∞
int k;//–∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–ª–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
float rez1;//—Ä–µ–∑—É –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏–π
int rez2;//–∫–æ–ª–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏–π
int cntn=0;//—Å—á–µ—Ç—á–∏–∫ —á–∏—Å–ª–∞ —Ä–∞–∑—Ä—è–¥–æ–≤ –≥–¥–µ—Ç–æ
int x=1;//–º–Ω–æ–∂–µ—Ç–µ–ª—å –Ω–∞ —Ä–∞–∑—Ä—è–¥—ã
int j;//—á–∏–∫–ª—ã
int i;//—Ü–∏–∫–ª—ã
 char a;//–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ—Ç–æ—Ä—É—é –∑–∞–≥–æ–Ω—è–ª–∏ –∫—É—á—É —Ä–∞–∑ —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–∞–∑—ã–Ω—Ö —Å—Ç—Ä–æ–∫
char znak;//–¥–µ–π—Å—Ç–≤–∏–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
int cnt;
float b;//—á–∏—Å–ª–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
float sum;//—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –æ—Ç–ø—Ä —Å–æ–æ–±—â–µ–Ω–∏–µ
char c1;//–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –æ—Ç–ø—Ä —Å—Ç—Ä–æ–∫—É
char *c;
int main()
{
    td_json_client_execute(nullptr, "{\"@type\":\"setLogVerbosityLevel\", \"new_verbosity_level\":0}");//–∫–∞–∫–∞—è—Ç–æ —Ñ–∏–≥–Ω—è –¥–ª—è –∑–∞–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    void *client = td_json_client_create();//—á—Ç–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
   // std::cout << << std::endl;
    //tdlib infa
    //–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    td_json_client_send(client, "{\"@type\": \"setTdlibParameters\",\"parameters\":{\"database_directory\": \"tdlib\",\"use_message_database\": false,\"use_secret_chats\": true,\"api_id\":704839,\"api_hash\": \"f8503bbd9f7218c07a0d046a3dd9334d\", \"system_language_code\": \"ru\",\"device_model\": \"Desktop\",\"system_version\": \"Linux\",\"application_version\": \"1.0\",\"enable_storage_optimizer\": true}}");
    //key
    //–ö–ª—é—á, –Ω—É–∂–µ–Ω –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ –≤–∞–∂–Ω–æ –∑–∞–Ω—á–µ–Ω–∏–µ
  td_json_client_send(client, "{\"@type\": \"checkDatabaseEncryptionKey\", \"key\":\"111111\"}");
    //proxy
    //–ü—Ä–æ–∫—Å–∏, –ü—Ä–∏–≤–µ—Ç –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä
    td_json_client_send(client, "{\"@type\":\"addProxy\",\"type\":{\"@type\":\"proxyTypeSocks5\"},\"server\":\"95.216.224.183\", \"port\":1080,\"enable\":true}");
   // std::cout << "yyyy";
   // sleep(3);
    //token
    //–¢–æ–∫–µ–Ω, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ñ–∞–π–ª
  td_json_client_send(client, "{\"@type\": \"checkAuthenticationBotToken\", \"token\":     \"111111\"}");
   
    
    
   // sleep(10);
    //–°—Ç—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ json-—è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —á–∏—Ç–∞—Ç—å —Ç–¥–ª–∏–± –∏ —Ç–µ–ª–µ–≥—Ä–∞–º. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —á–∏–∞–µ—Ç—Å—è –∞–¥–µ–∫–≤–∞—Ç–Ω–æ, —Ä—É—Å—Å–∫–∏–π –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∞—Å–∫–∏
    std::cout <<"{\"@type\":\"sendMessage\",\"chat_id\":247504167,\"input_message_content\":{\"@type\":\"inputMessageText\",\"text\":{\"@type\":\"formattedText\",\"text\":\"–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é:\n –ù–∏–∂–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.\n–≠—Ç–æ—Ç –ø–µ—Ä–µ—á–µ–Ω—å –ø–æ–º–æ–∂–µ—Ç –í–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á –≤ –±–∏–∑–Ω–µ—Å–µ, —Ä–∞–±–æ—Ç–µ –∏ —É—á—ë–±–µ.\n–í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n + —Å–ª–æ–∂–µ–Ω–∏–µ\n - –≤—ã—á–∏—Ç–∞–Ω–∏–µ\n * —É–º–Ω–æ–∂–µ–Ω–∏–µ\n / –¥–µ–ª–µ–Ω–∏–µ.\"}}}" << std::endl;
    //–¢–∞–π–º –∞—É—Ç, —Ö–µ—Ö
    const double WAIT_TIMEOUT = 10.0;  // seconds
    while (true) {
        //—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –∑–∞–Ω–µ—Å–µ–Ω–∞ —Å—é–¥–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∑–∞–º–µ–Ω—ã id chat –∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        const char *sender = "{\"@type\":\"sendMessage\",\"chat_id\":247504167,\"input_message_content\":{\"@type\":\"inputMessageText\",\"text\":{\"@type\":\"formattedText\",\"text\":\"1\"}}}";
        //—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫, —Ç–∞–∂–µ –ø—Ä–∏—á–∏–Ω–∞
        const char *knpki ="{\"@type\":\"sendMessage\",\"chat_id\":247504167,\"input_message_content\":{\"@type\":\"inputMessageText\",\"text\":{\"@type\":\"formattedText\",\"text\":\"Hello,World\"}},\"reply_markup\": {\"@type\": \"replyMarkupShowKeyboard\", \"rows\":[ [{\"@type\": \"keyboardButton\", \"text\":\"options\", \"type\": {\"@type\": \"keyboardButtonTypeText\"}}],[{\"@type\": \"keyboardButton\", \"text\":\"donation\", \"type\": {\"@type\": \"keyboardButtonTypeText\"}}]]}}" ;
        //—Å—Ç—Ä–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const char *reznaknopki ="{\"@type\":\"sendMessage\",\"chat_id\":247504167,\"input_message_content\":{\"@type\":\"inputMessageText\",\"text\":{\"@type\":\"formattedText\",\"text\":\"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é:\n–ù–∏–∂–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.\n–≠—Ç–æ—Ç –ø–µ—Ä–µ—á–µ–Ω—å –ø–æ–º–æ–∂–µ—Ç –í–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á –≤ –±–∏–∑–Ω–µ—Å–µ, —Ä–∞–±–æ—Ç–µ –∏ —É—á—ë–±–µ.\n–í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n + —Å–ª–æ–∂–µ–Ω–∏–µ\n - –≤—ã—á–∏—Ç–∞–Ω–∏–µ\n * —É–º–Ω–æ–∂–µ–Ω–∏–µ\n / –¥–µ–ª–µ–Ω–∏–µ.\"}}}";
        //–¢–µ–∫—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É donation
        const char *donation ="{\"@type\":\"sendMessage\",\"chat_id\":247504167,\"input_message_content\":{\"@type\":\"inputMessageText\",\"text\":{\"@type\":\"formattedText\",\"text\":\"–ú—ã –í–∞—Å –ª—é–±–∏–º –∏ —Ü–µ–Ω–∏–º üò±‚ù§Ô∏èüò±\"}}}";
        const char *result = td_json_client_receive(client, WAIT_TIMEOUT); //–≤–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç–µ–ª–µ–≥–∏
       
        if (result != nullptr)  //—Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–æ–ª—å
        {
            std::cout << result << std::endl;  //–≤—ã–≤–æ–¥ –ø—Ä–∏—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            
            a=*(result+20);   //–±—É–∫–≤–∞ –∏–∑ Last Message
            if (a=='L')   //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
            {
                a=*(result+164);  //"is_outgoing":true –ø—Ä–æ–≤–µ—Ä—è–µ–º true/false
            
            if (a=='f')   //–ø—Ä–æ–≤–µ—Ä–∫–∞
            {
                //td_json_client_send(client,"{\"@type\":\"sendMessage\",\"chat_id\":247504167,\"input_message_content\":{\"@type\":\"inputMessageText\",\"text\":{\"@type\":\"formattedText\",\"text\":\"1\"}},\"reply_markup\": {\"@type\": \"replyMarkupShowKeyboard\", \"rows\":[ [{\"@type\": \"keyboardButton\", \"text\":\"options\", \"type\": {\"@type\": \"keyboardButtonTypeText\"}}],[{\"@type\": \"keyboardButton\", \"text\":\"menu\", \"type\": {\"@type\": \"keyboardButtonTypeText\"}}]]}}");
                //–≤–Ω–µ—Å–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å —Å—Ç—Ä–æ–∫, —Ç–∫ —Å—Ç—Ä–æ–∫–∏ –≤ char, –∞ —á–∞—Ä –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É –∏ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å || \0 –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫, —Ç–∫ –∏–Ω–∞—á–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –Ω—É–∂–Ω—ã–º–∏
                char *forresult=(char*)malloc(800);
                 memset(forresult,'\0',800);
                memcpy(forresult,result,800);
                char *forsnd=(char*)malloc(200);
                memcpy(forsnd,sender,200);
                char *math=(char*)malloc(300);
                memset(math,'\0',300);
                char *knopki=(char*)malloc(800);
              //  memset(knopki,'\0',800);
                memcpy(knopki,knpki,800);
                char *rezalt=(char*)malloc(800);
                memcpy(rezalt,reznaknopki,800);
                char *don=(char*)malloc(800);
                memcpy(don,donation,800);
                //–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ chat id
                for(i=0;i>=0;i++)
                {
                    a=*(result+i);
                    if (a=='c')
                    {
                        a=*(result+i+1);
                        if(a=='h')
                        {
                            for(i=i;i>=0;i++)
                            {
                                a=*(result+i);
                                if(a==':')
                                {
                                    for(i=i;i>=0;i++)
                                    {
                                        a=*(result+i+1);
                                        if (a!=',')
                                        {
                                            //–∑–∞–ø–∏—Å—å id –≤ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                            memcpy((forsnd+i-9),&a,sizeof(char));
                                            memcpy((knopki+i-9),&a,sizeof(char));
                                            memcpy((rezalt+i-9),&a,sizeof(char));
                                           memcpy((don+i-9),&a,sizeof(char));
                                            
                                        }
                                        else
                                        {
                                            //–≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–æ–≤ for
                                            i=-10;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                }
                //–ø–æ–∏—Å–∫ –º–µ—Å—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                for(i=0;i>=0;i++)
                {
                    a=*(forresult+i);
                    if(a=='m')
                    {
                        a=*(forresult+i+1);
                        if(a=='a')
                        {
                        for(i=i;i>=0;i++)
                        {
                            a=*(forresult+i);
                            if(a==':')
                            {
                                for(i=i;i>=0;i++)
                                {
                                    //–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
                                    a=*(forresult+i+3);
                                    if(a=='s')
                                    {
                                        a=*(forresult+i+4);
                                        if(a=='t')
                                        {
                                            td_json_client_send(client,knopki);
                                             std::cout << knopki << std::endl;
                                             goto end;
                                            break;
                                           
                                        }
                                    }
                                    //–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É option
                                    a = *(forresult + i + 2);
                                    if (a == 'o')
                                    {
                                        a = *(forresult + i + 3);
                                        if (a == 'p')
                                        {
                                            a = *(forresult + i + 4);
                                            if (a == 't')
                                            {
                                                td_json_client_send(client,rezalt);
                                               goto end;
                                                break;
                                            }
                                            
                                            
                                        }
                                    }
                                     //–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É donation
                                    a = *(forresult + i + 2);
                                    if (a == 'd')
                                    {
                                        a = *(forresult + i + 3);
                                        if (a == 'o')
                                        {
                                            a = *(forresult + i + 4);
                                            if (a == 'n')
                                            {
                                                td_json_client_send(client,don);
                                                 goto end;
                                                break;
                                            }
                                            
                                            
                                        }
                                    }
                                    a=*(forresult+i);
                                    //–Ω–∞ –∑–∞–ø—è—Ç–æ–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                                    if (a!=',')
                                    {
                                        //—É–º–Ω–æ–∂–µ–Ω–∏–µ
                                        if (a=='*')
                                        {
                                            b=0;
                                            x=1;
                                            j=i;
                                            a=*(forresult+j-1);
                                            while (a>='0'&&a<='9')
                                            {
                                                 j--;
                                                a=*(forresult+j-1);
                                               
                                            }
                                            //–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–≤–∞ —Ü—ã—Ñ—Ä —Å–ª–µ–≤–∞ –æ—Ç *
                                            cntn1=i-j;
                                            //–í—ã—á–µ—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Å–ª–∞ —Å–ª–µ–≤–∞ –æ—Ç *
                                            for(j=i-cntn1;j<i;j++)
                                            {
                                                a=*(forresult+j);
                                                if (a>='0'&&a<='9')
                                                {
                                                    b*=x;
                                                    b+=(float)(a-'0');
                                                    std::cout <<b<< std::endl;
                                                    x=10;
                                                }
                                                else break;
                                            }
                                            rez1=b;
                                            std::cout <<rez1<< std::endl;
                                            //–∫–æ–ª–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å–ª–µ–≤–∞ –æ—Ç *
                                            rez2=cntn1;
                                            b=0;
                                            x=1;
                                            //—Ç–æ–∂–µ —Å–∞–º–æ–µ —Å–ø—Ä–∞–≤–∞
                                            for (j=i;j>0;j++)
                                            {
                                                
                                                a=*(forresult+j+1);
                                                if (a>='0'&&a<='9')
                                                {
                                                    
                                                    b*=x;
                                                    b+=(float)(a-'0');
                                                    x=10;
                                                }
                                                else break;
                                            }
                                            //—Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è
                                            rez1*=b;
                                            rezf=rez1;
                                          
                                            cntn2=j-i;
                                            rez2+=cntn2;
                                          
                                            x=1;
                                            //–∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –Ω–∞–¥–æ, –ü—Ä–∏–º–µ—Ä: 12+5*4=12+20, –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π, —á—Ç–æ–±—ã –ø–æ –∏—Ç–æ–≥—É –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Å—ã –∏ –ø–ª—é—Å—ã
                                             while ((int)(rez1/x)>=1)
                                             { x*=10;
                                                 cntn++;
                                             }
                                            k=j+cntn-rez2-1;
                                            //j=i-cntn1;
                                            for (j=i-cntn1-1;j<(i-cntn1+cntn)-1;j++)
                                            {
                                                 x/=10;
                                                c1=(char)(rez1/x)+'0';
                                                std::cout <<c1<< std::endl;
                                                memcpy(forresult+j+1,&c1,sizeof(char));
                                                rez1=rez1-int(rez1/x)*x;
                                            }
                                            for (j=j+1;j<=1000;j++)
                                            {
                                                memcpy(forresult+j,forresult+i+cntn2+1,sizeof(char));
                                                i++;
                                            }
                                            br=1;
                                            i=580;
                                        }
                                        a=*(forresult+i);
                                        //–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–æ * –∫–æ–ø–∏ –ø–∞—Å—Ç
                                            if (a=='/')
                                            {
                                                b=0;
                                                x=1;
                                                j=i;
                                                a=*(forresult+j-1);
                                                while (a>='0'&&a<='9')
                                                {
                                                    j--;
                                                    a=*(forresult+j-1);
                                                    
                                                }
                                                cntn1=i-j;
                                                for(j=i-cntn1;j<i;j++)
                                                {
                                                    a=*(forresult+j);
                                                    if (a>='0'&&a<='9')
                                                    {
                                                        b*=x;
                                                        b+=(float)(a-'0');
                                                        std::cout <<b<< std::endl;
                                                        x=10;
                                                    }
                                                    else break;
                                                }
                                                rez1=b;
                                                std::cout <<rez1<< std::endl;
                                                rez2=cntn1;
                                                b=0;
                                                x=1;
                                                
                                                for (j=i;j>0;j++)
                                                {
                                                    
                                                    a=*(forresult+j+1);
                                                    if (a>='0'&&a<='9')
                                                    {
                                                        
                                                        b*=x;
                                                        b+=(float)(a-'0');
                                                        x=10;
                                                    }
                                                    else break;
                                                }
                                                rez1/=b;
                                                rezf=rez1;
                                                std::cout <<rez1<< std::endl;
                                                cntn2=j-i;
                                                rez2+=cntn2;
                                                
                                                x=1;
                                                while ((int)(rez1/x)>=1)
                                                { x*=10;
                                                    cntn++;
                                                }
                                                k=j+cntn-rez2-1;
                                               
                                                for (j=i-cntn1-1;j<(i-cntn1+cntn)-1;j++)
                                                {
                                                    x/=10;
                                                    c1=(char)(rez1/x)+'0';
                                                    std::cout <<c1<< std::endl;
                                                    memcpy(forresult+j+1,&c1,sizeof(char));
                                                    rez1=rez1-int(rez1/x)*x;
                                                }
                                                for (j=j+1;j<=1000;j++)
                                                {
                                                    memcpy(forresult+j,forresult+i+cntn2+1,sizeof(char));
                                                    i++;
                                                }
                                                std::cout <<forresult<< std::endl;
                                                br=1;
                                                i=580;
                                        }
                                        
                                        
                                       // –∑–¥–µ—Å—å –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —Å—Ä–∞–∑—É —Å–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                        b=0;
                                        x=1;
                                        j=0;
                                        rez2=0;
                                        cntn=0;
                                        cntn1=0;
                                        cntn2=0;
                                        //rezf=rez1;
                                        rez1=0;
                                        }
                                    else
                                    {
                                        //–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ +/- –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏ –æ—Ç *&/
                                        j=580;
                                        while (j>0)
                                        {
                                            a=*(forresult+j);
                                            if (a!=',')
                                            {
                                                //–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–∏–µ —á–∞—Ä –≤ —Ñ–ª–æ–∞—Ç(–¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫) –±—ã–ª–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Ä—É–∫–∞–º–∏ –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è, –º–æ–∂–Ω–æ –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å —ç—Ç–æ
                                                    while (j>0)
                                                    {
                                                         a=*(forresult+j);
                                                         j++;
                                                        if (a>='0'&&a<='9')
                                                        {
                                                   
                                                    b*=x;
                                                    b+=(float)(a-'0');
                                                    x=10;
                                                    }
                                                       
                                                        else
                                                        {
                                                            i=j;
                                                            break;
                                                        }
                                                        
                                                }
                                               //–ª–æ–≥–∏—á–Ω–æ
                                                if (a=='+')
                                                {
                                                    cntn3++;
                                                    znak=a;
                                                    sum+=b;
                                                    b=0;
                                                    
                                                }
                                                //–ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ —Å–ª–∞–≥–∞–µ–º–æ–µ –∞ –Ω–µ –≤—ã—á–∏—Ç–∞–µ–º–æ–µ
                                               else if (znak=='+')
                                                {
                                                    sum+=b;
                                                    b=0;
                                                    znak='0';
                                                }
                                                if (a=='-')
                                                {
                                                    znak=a;
                                                    sum+=b;
                                                    b=0;
                                                }
                                                //—Ç–æ–∂–µ —Å–∞–º–æ–µ
                                                else if (znak=='-')
                                                {
                                                    cntn3++;
                                                    sum-=b;
                                                    b=0;
                                                    znak='0';
                                                }
                                            }
                                            else
                                            {
                                                std::cout <<sum<< std::endl;
                                               // sleep(3);
                                                //–≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–æ–≤
                                                j=-10;
                                            }
                                            
                                        }
                                        //–Ω–µ –∑–Ω–∞—é –∑–∞—á–µ–º, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ —Ç—Ä–æ—à—å
                                        j=-10;
                                        
                                    }
                                    //–ª–∏—à–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                                    br=0;
                                   
                                    
                                }
                                x=1;
                                //–≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å—Ç—Ä–æ–∫–∏
                                if (cntn3==0)  sum=rezf;
                                       while ((int)(sum/x)>=1)
                                        {
                                            x*=10;
                                            cntn++;
                                        }
                                    //x=0;
                                    for (j=0;j<139+cntn;j++)
                                    {
                                        if (j<=134)
                                        {
                                            memcpy(math+j,forsnd+j,sizeof(char));
                                        }
                                        else if ((j>134)&&(j<=134+cntn))
                                        {
                                            x/=10;
                                            c1=(char)(sum/x)+'0';
                                            memcpy(math+j,&c1,sizeof(char));
                                            sum=sum-int(sum/x)*x;
                                        }
                                        else
                                        {
                                            memcpy(math+j,forsnd+(j-cntn+1),sizeof(char));
                                        }
                                    }
                                    
                                
                                sum=0;
                                x=1;
                                
                                
                            }
                                
                          }
                        }
                    }
                }
                
               
                td_json_client_send(client,math);
            end:
                cntn=0;
                x=1;
                cntn3=0;
                //
               // *(sender+157)=sum;
                // memset(forresult,'5',800);
               // memset(math,'5',300);
                free(forsnd);
                free(math);
                free(forresult);
                free(knopki);
                free (rezalt);
                free (don);
                i=0;
                j=0;
                 std::cout <<"finish"<< std::endl;
                //sum=0;
            }
            }
        }
        
    }
    td_json_client_destroy(client);
}
